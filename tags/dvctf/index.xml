<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>DVCTF on Anthrace | CTF Writeups</title><link>https://anthr4ce.github.io/tags/dvctf/</link><description>Recent content in DVCTF on Anthrace | CTF Writeups</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Tue, 01 Jul 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://anthr4ce.github.io/tags/dvctf/index.xml" rel="self" type="application/rss+xml"/><item><title>DVCTF 2025 - WEB LouvreArchives</title><link>https://anthr4ce.github.io/ctf-writeups/dvctf-2025/web-louvrearchives/</link><pubDate>Tue, 01 Jul 2025 00:00:00 +0000</pubDate><guid>https://anthr4ce.github.io/ctf-writeups/dvctf-2025/web-louvrearchives/</guid><description>&lt;hr>
&lt;p>&lt;img src="images/img1.png" alt="Screenshot">&lt;/p>
&lt;p>In this challenge, the goal is to access &lt;code>flag.webp&lt;/code> as indicated in the source code.&lt;/p>
&lt;p>While exploring the page, I noticed a long base64-encoded string. Once decoded and reorganized, it contained several &lt;code>.webp&lt;/code> images with unusual names like &lt;code>1991781613.webp&lt;/code>, &lt;code>1273827392.webp&lt;/code>, etc.&lt;/p>
&lt;p>Checking the source code:&lt;/p>
&lt;p>&lt;img src="images/img2.png" alt="Screenshot">&lt;/p>
&lt;p>We understand that filenames are generated using Python&amp;rsquo;s &lt;code>getrandbits(32)&lt;/code>, which produces 32 random bits via the &lt;code>random.getrandbits&lt;/code> function.&lt;/p>
&lt;p>The interesting point here is that this function uses the &lt;strong>Mersenne Twister&lt;/strong> generator, a PRNG (Pseudo-Random Number Generator) that is &lt;strong>not cryptographically secure&lt;/strong>.&lt;/p></description></item></channel></rss>