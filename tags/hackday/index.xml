<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hackday on Anthrace | CTF Writeups</title><link>https://anthr4ce.github.io/tags/hackday/</link><description>Recent content in Hackday on Anthrace | CTF Writeups</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Tue, 01 Jul 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://anthr4ce.github.io/tags/hackday/index.xml" rel="self" type="application/rss+xml"/><item><title>HackDay - Forensic</title><link>https://anthr4ce.github.io/posts/ctf-writeups/hackday/forensic/i-believe-you-cant-fly_en/</link><pubDate>Tue, 01 Jul 2025 00:00:00 +0000</pubDate><guid>https://anthr4ce.github.io/posts/ctf-writeups/hackday/forensic/i-believe-you-cant-fly_en/</guid><description>&lt;h3 id="forensic-challenge---extracting-the-hidden-flag">
 &lt;strong>Forensic Challenge - Extracting the Hidden Flag&lt;/strong>
 &lt;a class="heading-link" href="#forensic-challenge---extracting-the-hidden-flag">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h3>
&lt;p>In this challenge, we are given a &lt;strong>ZIP file&lt;/strong> containing a &lt;strong>log file&lt;/strong> and &lt;strong>two images&lt;/strong>.&lt;/p>
&lt;hr>
&lt;h3 id="step-1-analyzing-the-log-file">
 &lt;strong>Step 1: Analyzing the Log File&lt;/strong>
 &lt;a class="heading-link" href="#step-1-analyzing-the-log-file">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h3>
&lt;p>I started by analyzing the log file, and I found &lt;strong>five encoded words&lt;/strong>. I used &lt;strong>dcode.fr&lt;/strong> to decode them:&lt;/p>
&lt;ul>
&lt;li>&lt;code>ercbafr&lt;/code> (ROT13) → &lt;strong>reponse&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="images/forensic_1.png" alt="Screenshot">&lt;/p>
&lt;ul>
&lt;li>&lt;code>c29sdXRpb24=&lt;/code> (Base64) → &lt;strong>solution&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="images/forensic_2.png" alt="Screenshot">&lt;/p></description></item><item><title>HackDay - Stegano</title><link>https://anthr4ce.github.io/posts/ctf-writeups/hackday/forensic/i-believe-you-cant-fly_fr/</link><pubDate>Tue, 01 Jul 2025 00:00:00 +0000</pubDate><guid>https://anthr4ce.github.io/posts/ctf-writeups/hackday/forensic/i-believe-you-cant-fly_fr/</guid><description>&lt;h3 id="challenge-forensic---extraction-du-flag-caché">
 &lt;strong>Challenge Forensic - Extraction du Flag Caché&lt;/strong>
 &lt;a class="heading-link" href="#challenge-forensic---extraction-du-flag-cach%c3%a9">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h3>
&lt;p>Dans ce challenge, nous avons un &lt;strong>fichier ZIP&lt;/strong> contenant un &lt;strong>fichier de log&lt;/strong> et &lt;strong>deux images&lt;/strong>.&lt;/p>
&lt;hr>
&lt;h3 id="étape-1--analyse-du-fichier-de-log">
 &lt;strong>Étape 1 : Analyse du Fichier de Log&lt;/strong>
 &lt;a class="heading-link" href="#%c3%a9tape-1--analyse-du-fichier-de-log">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h3>
&lt;p>J’ai commencé par analyser le fichier de log et j’ai trouvé &lt;strong>cinq mots encodés&lt;/strong>. J’ai utilisé &lt;strong>dcode.fr&lt;/strong> pour les décoder :&lt;/p>
&lt;ul>
&lt;li>&lt;code>ercbafr&lt;/code> (ROT13) → &lt;strong>reponse&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="images/forensic_1.png" alt="Screenshot">&lt;/p></description></item><item><title>HackDay - Stegano</title><link>https://anthr4ce.github.io/posts/ctf-writeups/hackday/stegano/en_it-says-a-lot-when-there-is-no-music/</link><pubDate>Tue, 01 Jul 2025 00:00:00 +0000</pubDate><guid>https://anthr4ce.github.io/posts/ctf-writeups/hackday/stegano/en_it-says-a-lot-when-there-is-no-music/</guid><description>&lt;p>In this challenge, we are provided with a &lt;code>.wav&lt;/code> file that, at first glance, appears to be a simple audio file. Our task is to analyze the file and uncover a hidden flag.&lt;/p>
&lt;hr>
&lt;h4 id="step-1-playing-the-audio">
 &lt;strong>Step 1: Playing the Audio&lt;/strong>
 &lt;a class="heading-link" href="#step-1-playing-the-audio">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h4>
&lt;p>I started by playing the audio, expecting something unusual—perhaps some hidden message or distortion—but everything sounded normal. There was no apparent clue in the audio playback.&lt;/p></description></item><item><title>HackDay - Stegano</title><link>https://anthr4ce.github.io/posts/ctf-writeups/hackday/stegano/fr_it-says-a-lot-when-there-is-no-music/</link><pubDate>Tue, 01 Jul 2025 00:00:00 +0000</pubDate><guid>https://anthr4ce.github.io/posts/ctf-writeups/hackday/stegano/fr_it-says-a-lot-when-there-is-no-music/</guid><description>&lt;h3 id="challenge--analyse-dun-fichier-wav-pour-trouver-des-données-cachées">
 Challenge : Analyse d’un fichier .wav pour trouver des données cachées
 &lt;a class="heading-link" href="#challenge--analyse-dun-fichier-wav-pour-trouver-des-donn%c3%a9es-cach%c3%a9es">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h3>
&lt;p>Dans ce challenge, nous avions un fichier &lt;code>.wav&lt;/code> qui, à première vue, semblait être un simple fichier audio. Notre tâche consistait à analyser ce fichier et à découvrir un flag caché.&lt;/p>
&lt;h4 id="étape-1--écoute-du-fichier-audio">
 &lt;strong>Étape 1 : Écoute du fichier audio&lt;/strong>
 &lt;a class="heading-link" href="#%c3%a9tape-1--%c3%a9coute-du-fichier-audio">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h4>
&lt;p>J’ai commencé par écouter le fichier audio. Comme prévu, rien d’anormal n’a été détecté : il sonnait comme un fichier audio classique. Cela suggérait que les informations cachées se trouvaient à l&amp;rsquo;intérieur du fichier lui-même.&lt;/p></description></item><item><title>HackDay - Web</title><link>https://anthr4ce.github.io/posts/ctf-writeups/hackday/web/internal-blog/internal-blog_en/</link><pubDate>Tue, 01 Jul 2025 00:00:00 +0000</pubDate><guid>https://anthr4ce.github.io/posts/ctf-writeups/hackday/web/internal-blog/internal-blog_en/</guid><description>&lt;h3 id="exploiting-an-xss-vulnerability-in-a-blog-with-moderator-visit">
 &lt;strong>Exploiting an XSS Vulnerability in a Blog with Moderator Visit&lt;/strong>
 &lt;a class="heading-link" href="#exploiting-an-xss-vulnerability-in-a-blog-with-moderator-visit">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h3>
&lt;p>&lt;img src="images/blog_chall.png" alt="Screenshot">&lt;/p>
&lt;p>In this challenge, we have a blog with a user registration and login system.&lt;br>
We know that the &lt;strong>admin (or the moderator bot) will visit our profile&lt;/strong> when we register and when we post an article.&lt;/p>
&lt;p>A &lt;strong>source code leak&lt;/strong> is also available.&lt;/p>
&lt;p>&lt;img src="images/blog_leak.png" alt="Screenshot">&lt;/p>
&lt;hr>
&lt;h3 id="step-1-analyzing-the-source-code">
 &lt;strong>Step 1: Analyzing the Source Code&lt;/strong>
 &lt;a class="heading-link" href="#step-1-analyzing-the-source-code">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h3>
&lt;p>Looking at the leaked source code, we notice an &lt;strong>attempt at sanitization&lt;/strong> of the fields, but it is performed &lt;strong>after the .save()&lt;/strong>, meaning that &lt;strong>even if an error is displayed, the data is already stored in the database&lt;/strong>.&lt;/p></description></item><item><title>HackDay - Web</title><link>https://anthr4ce.github.io/posts/ctf-writeups/hackday/web/internal-blog/internal-blog_fr/</link><pubDate>Tue, 01 Jul 2025 00:00:00 +0000</pubDate><guid>https://anthr4ce.github.io/posts/ctf-writeups/hackday/web/internal-blog/internal-blog_fr/</guid><description>&lt;h3 id="exploitation-d">
 &lt;strong>Exploitation d&amp;rsquo;une faille XSS dans un blog avec visite de modérateur&lt;/strong>
 &lt;a class="heading-link" href="#exploitation-d">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h3>
&lt;p>&lt;img src="images/blog_chall.png" alt="Screenshot">&lt;/p>
&lt;p>Dans ce challenge, on a un blog avec un système d&amp;rsquo;enregistrement et de connexion des utilisateurs.&lt;br>
On sait que l&amp;rsquo;&lt;strong>admin (ou le bot modérateur) visitera notre profil&lt;/strong> lorsqu&amp;rsquo;on s&amp;rsquo;enregistre et lorsqu&amp;rsquo;on poste un article.&lt;/p>
&lt;p>Un &lt;strong>leak du code source&lt;/strong> est également présent.&lt;/p>
&lt;p>&lt;img src="images/blog_leak.png" alt="Screenshot">&lt;/p>
&lt;hr>
&lt;h3 id="étape-1--analyser-le-code-source">
 &lt;strong>Étape 1 : Analyser le code source&lt;/strong>
 &lt;a class="heading-link" href="#%c3%a9tape-1--analyser-le-code-source">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h3>
&lt;p>En regardant le leak de code, on remarque une &lt;strong>tentative de sanitization&lt;/strong> des champs, mais celle-ci est effectuée &lt;strong>après le &lt;code>.save()&lt;/code>&lt;/strong>, ce qui signifie que &lt;strong>même si une erreur s&amp;rsquo;affiche, les données sont déjà enregistrées en base&lt;/strong>.&lt;/p></description></item><item><title>HackDay - Web</title><link>https://anthr4ce.github.io/posts/ctf-writeups/hackday/web/open-the-door/open-the-door_en/</link><pubDate>Tue, 01 Jul 2025 00:00:00 +0000</pubDate><guid>https://anthr4ce.github.io/posts/ctf-writeups/hackday/web/open-the-door/open-the-door_en/</guid><description>&lt;h3 id="flask-web-challenge---template-injection-analysis">
 &lt;strong>Flask Web Challenge - Template Injection Analysis&lt;/strong>
 &lt;a class="heading-link" href="#flask-web-challenge---template-injection-analysis">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h3>
&lt;p>In this challenge, we have a downloadable folder containing several files.&lt;/p>
&lt;p>&lt;img src="images/door_files.png" alt="Screenshot">&lt;/p>
&lt;hr>
&lt;h3 id="step-1-identifying-the-web-framework">
 &lt;strong>Step 1: Identifying the Web Framework&lt;/strong>
 &lt;a class="heading-link" href="#step-1-identifying-the-web-framework">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h3>
&lt;p>By examining the &lt;code>requirements.txt&lt;/code> and &lt;code>app.py&lt;/code> files, we confirm that the application is built using &lt;strong>Flask&lt;/strong>.&lt;/p>
&lt;p>&lt;img src="images/door_flask_infos.png" alt="Screenshot">&lt;/p>
&lt;hr>
&lt;h3 id="step-2-examining-the-docker-configuration">
 &lt;strong>Step 2: Examining the Docker Configuration&lt;/strong>
 &lt;a class="heading-link" href="#step-2-examining-the-docker-configuration">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h3>
&lt;p>Looking into the &lt;code>docker-compose.yaml&lt;/code> file, we notice that the application is using &lt;strong>templates&lt;/strong> as an environment variable, which could be a potential security risk.&lt;/p></description></item><item><title>HackDay - Web</title><link>https://anthr4ce.github.io/posts/ctf-writeups/hackday/web/open-the-door/open-the-door_fr/</link><pubDate>Tue, 01 Jul 2025 00:00:00 +0000</pubDate><guid>https://anthr4ce.github.io/posts/ctf-writeups/hackday/web/open-the-door/open-the-door_fr/</guid><description>&lt;h3 id="flask-web-challenge---template-injection-analysis">
 &lt;strong>Flask Web Challenge - Template Injection Analysis&lt;/strong>
 &lt;a class="heading-link" href="#flask-web-challenge---template-injection-analysis">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h3>
&lt;p>In this challenge, we have a downloadable folder containing several files.&lt;/p>
&lt;p>&lt;img src="images/door_files.png" alt="Screenshot">&lt;/p>
&lt;hr>
&lt;h3 id="step-1-identifying-the-web-framework">
 &lt;strong>Step 1: Identifying the Web Framework&lt;/strong>
 &lt;a class="heading-link" href="#step-1-identifying-the-web-framework">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h3>
&lt;p>By examining the &lt;code>requirements.txt&lt;/code> and &lt;code>app.py&lt;/code> files, we confirm that the application is built using &lt;strong>Flask&lt;/strong>.&lt;/p>
&lt;p>&lt;img src="images/door_flask_infos.png" alt="Screenshot">&lt;/p>
&lt;hr>
&lt;h3 id="step-2-examining-the-docker-configuration">
 &lt;strong>Step 2: Examining the Docker Configuration&lt;/strong>
 &lt;a class="heading-link" href="#step-2-examining-the-docker-configuration">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h3>
&lt;p>Looking into the &lt;code>docker-compose.yaml&lt;/code> file, we notice that the application is using &lt;strong>templates&lt;/strong> as an environment variable, which could be a potential security risk.&lt;/p></description></item><item><title>HackDay - Web</title><link>https://anthr4ce.github.io/posts/ctf-writeups/hackday/web/the-analytical-engine-leak/the-analytical-engine-leak_en/</link><pubDate>Tue, 01 Jul 2025 00:00:00 +0000</pubDate><guid>https://anthr4ce.github.io/posts/ctf-writeups/hackday/web/the-analytical-engine-leak/the-analytical-engine-leak_en/</guid><description>&lt;h3 id="sql-injection-and-extracting-sensitive-data">
 &lt;strong>SQL Injection and Extracting Sensitive Data&lt;/strong>
 &lt;a class="heading-link" href="#sql-injection-and-extracting-sensitive-data">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h3>
&lt;p>In this challenge, we have a form with two fields: &lt;code>username&lt;/code> and &lt;code>password&lt;/code>. Our goal is to exploit an SQL Injection vulnerability to extract sensitive data from the database.&lt;/p>
&lt;p>&lt;img src="images/web_chall_description.png" alt="Screenshot">&lt;/p>
&lt;hr>
&lt;h4 id="step-1-testing-a-basic-sql-injection">
 &lt;strong>Step 1: Testing a Basic SQL Injection&lt;/strong>
 &lt;a class="heading-link" href="#step-1-testing-a-basic-sql-injection">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h4>
&lt;p>I started by testing a simple SQL injection in the &lt;code>password&lt;/code> field. Here is the payload used:&lt;/p></description></item><item><title>HackDay - Web</title><link>https://anthr4ce.github.io/posts/ctf-writeups/hackday/web/the-analytical-engine-leak/the-analytical-engine-leak_fr/</link><pubDate>Tue, 01 Jul 2025 00:00:00 +0000</pubDate><guid>https://anthr4ce.github.io/posts/ctf-writeups/hackday/web/the-analytical-engine-leak/the-analytical-engine-leak_fr/</guid><description>&lt;p>&lt;strong>SQL Injection et récupération de données sensibles&lt;/strong>&lt;/p>
&lt;h2 id="screenshot">
 Dans ce challenge, on a un formulaire avec deux champs : &lt;code>username&lt;/code> et &lt;code>password&lt;/code>. Notre objectif est d&amp;rsquo;exploiter une faille SQL Injection pour extraire des données sensibles de la base de données.
&lt;img src="images/web_chall_description.png" alt="Screenshot">
 &lt;a class="heading-link" href="#screenshot">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;h4 id="étape-1--tester-une-injection-basique">
 &lt;strong>Étape 1 : Tester une injection basique&lt;/strong>
 &lt;a class="heading-link" href="#%c3%a9tape-1--tester-une-injection-basique">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h4>
&lt;p>J&amp;rsquo;ai commencé par tester une injection SQL simple dans le champ &lt;code>password&lt;/code>. Voici le payload utilisé :&lt;/p></description></item></channel></rss>